{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p style=\"text-align:center\">\n",
    "    <a href=\"https://skills.network/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkPY0220ENSkillsNetwork900-2022-01-01\" target=\"_blank\">\n",
    "    <img src=\"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/assets/logos/SN_web_lightmode.png\" width=\"200\" alt=\"Skills Network Logo\">\n",
    "    </a>\n",
    "</p>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h1>Extracting and Visualizing Stock Data</h1>\n",
    "<h2>Description</h2>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Extracting essential data from a dataset and displaying it is a necessary part of data science; therefore individuals can make correct decisions based on the data. In this assignment, you will extract some stock data, you will then display this data in a graph.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2>Table of Contents</h2>\n",
    "<div class=\"alert alert-block alert-info\" style=\"margin-top: 20px\">\n",
    "    <ul>\n",
    "        <li>Define a Function that Makes a Graph</li>\n",
    "        <li>Question 1: Use yfinance to Extract Stock Data</li>\n",
    "        <li>Question 2: Use Webscraping to Extract Tesla Revenue Data</li>\n",
    "        <li>Question 3: Use yfinance to Extract Stock Data</li>\n",
    "        <li>Question 4: Use Webscraping to Extract GME Revenue Data</li>\n",
    "        <li>Question 5: Plot Tesla Stock Graph</li>\n",
    "        <li>Question 6: Plot GameStop Stock Graph</li>\n",
    "    </ul>\n",
    "<p>\n",
    "    Estimated Time Needed: <strong>30 min</strong></p>\n",
    "</div>\n",
    "\n",
    "<hr>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***Note***:- If you are working Locally using anaconda, please uncomment the following code and execute it.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting yfinance==0.2.38\n",
      "  Downloading yfinance-0.2.38-py2.py3-none-any.whl.metadata (11 kB)\n",
      "Collecting pandas>=1.3.0 (from yfinance==0.2.38)\n",
      "  Downloading pandas-2.2.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (19 kB)\n",
      "Collecting numpy>=1.16.5 (from yfinance==0.2.38)\n",
      "  Downloading numpy-2.0.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (60 kB)\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m60.9/60.9 kB\u001b[0m \u001b[31m6.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[?25hRequirement already satisfied: requests>=2.31 in /opt/conda/lib/python3.11/site-packages (from yfinance==0.2.38) (2.31.0)\n",
      "Collecting multitasking>=0.0.7 (from yfinance==0.2.38)\n",
      "  Downloading multitasking-0.0.11-py3-none-any.whl.metadata (5.5 kB)\n",
      "Collecting lxml>=4.9.1 (from yfinance==0.2.38)\n",
      "  Downloading lxml-5.3.0-cp311-cp311-manylinux_2_28_x86_64.whl.metadata (3.8 kB)\n",
      "Collecting appdirs>=1.4.4 (from yfinance==0.2.38)\n",
      "  Downloading appdirs-1.4.4-py2.py3-none-any.whl.metadata (9.0 kB)\n",
      "Requirement already satisfied: pytz>=2022.5 in /opt/conda/lib/python3.11/site-packages (from yfinance==0.2.38) (2024.1)\n",
      "Collecting frozendict>=2.3.4 (from yfinance==0.2.38)\n",
      "  Downloading frozendict-2.4.4-py311-none-any.whl.metadata (23 kB)\n",
      "Collecting peewee>=3.16.2 (from yfinance==0.2.38)\n",
      "  Downloading peewee-3.17.6.tar.gz (3.0 MB)\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m3.0/3.0 MB\u001b[0m \u001b[31m94.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[?25h  Installing build dependencies ... \u001b[?25ldone\n",
      "\u001b[?25h  Getting requirements to build wheel ... \u001b[?25ldone\n",
      "\u001b[?25h  Preparing metadata (pyproject.toml) ... \u001b[?25ldone\n",
      "\u001b[?25hRequirement already satisfied: beautifulsoup4>=4.11.1 in /opt/conda/lib/python3.11/site-packages (from yfinance==0.2.38) (4.12.3)\n",
      "Collecting html5lib>=1.1 (from yfinance==0.2.38)\n",
      "  Downloading html5lib-1.1-py2.py3-none-any.whl.metadata (16 kB)\n",
      "Requirement already satisfied: soupsieve>1.2 in /opt/conda/lib/python3.11/site-packages (from beautifulsoup4>=4.11.1->yfinance==0.2.38) (2.5)\n",
      "Requirement already satisfied: six>=1.9 in /opt/conda/lib/python3.11/site-packages (from html5lib>=1.1->yfinance==0.2.38) (1.16.0)\n",
      "Requirement already satisfied: webencodings in /opt/conda/lib/python3.11/site-packages (from html5lib>=1.1->yfinance==0.2.38) (0.5.1)\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in /opt/conda/lib/python3.11/site-packages (from pandas>=1.3.0->yfinance==0.2.38) (2.9.0)\n",
      "Collecting tzdata>=2022.7 (from pandas>=1.3.0->yfinance==0.2.38)\n",
      "  Downloading tzdata-2024.1-py2.py3-none-any.whl.metadata (1.4 kB)\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.11/site-packages (from requests>=2.31->yfinance==0.2.38) (3.3.2)\n",
      "Requirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.11/site-packages (from requests>=2.31->yfinance==0.2.38) (3.7)\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.11/site-packages (from requests>=2.31->yfinance==0.2.38) (2.2.1)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.11/site-packages (from requests>=2.31->yfinance==0.2.38) (2024.6.2)\n",
      "Downloading yfinance-0.2.38-py2.py3-none-any.whl (72 kB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m73.0/73.0 kB\u001b[0m \u001b[31m8.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[?25hDownloading appdirs-1.4.4-py2.py3-none-any.whl (9.6 kB)\n",
      "Downloading frozendict-2.4.4-py311-none-any.whl (16 kB)\n",
      "Downloading html5lib-1.1-py2.py3-none-any.whl (112 kB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m112.2/112.2 kB\u001b[0m \u001b[31m13.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[?25hDownloading lxml-5.3.0-cp311-cp311-manylinux_2_28_x86_64.whl (5.0 MB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m5.0/5.0 MB\u001b[0m \u001b[31m108.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m\n",
      "\u001b[?25hDownloading multitasking-0.0.11-py3-none-any.whl (8.5 kB)\n",
      "Downloading numpy-2.0.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (19.5 MB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m19.5/19.5 MB\u001b[0m \u001b[31m103.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m00:01\u001b[0m\n",
      "\u001b[?25hDownloading pandas-2.2.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (13.0 MB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.0/13.0 MB\u001b[0m \u001b[31m111.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m0:01\u001b[0m\n",
      "\u001b[?25hDownloading tzdata-2024.1-py2.py3-none-any.whl (345 kB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m345.4/345.4 kB\u001b[0m \u001b[31m21.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[?25hBuilding wheels for collected packages: peewee\n",
      "  Building wheel for peewee (pyproject.toml) ... \u001b[?25ldone\n",
      "\u001b[?25h  Created wheel for peewee: filename=peewee-3.17.6-py3-none-any.whl size=138890 sha256=c6a6d2026840320e1f36278c47e47ec2c0bee69e3af106266627585e0d345b3b\n",
      "  Stored in directory: /home/jupyterlab/.cache/pip/wheels/1c/09/7e/9f659fde248ecdc1722a142c1d744271aad3914a0afc191058\n",
      "Successfully built peewee\n",
      "Installing collected packages: peewee, multitasking, appdirs, tzdata, numpy, lxml, html5lib, frozendict, pandas, yfinance\n",
      "Successfully installed appdirs-1.4.4 frozendict-2.4.4 html5lib-1.1 lxml-5.3.0 multitasking-0.0.11 numpy-2.0.1 pandas-2.2.2 peewee-3.17.6 tzdata-2024.1 yfinance-0.2.38\n",
      "Requirement already satisfied: pandas==2.2.2 in /opt/conda/lib/python3.11/site-packages (2.2.2)\n",
      "Requirement already satisfied: numpy>=1.23.2 in /opt/conda/lib/python3.11/site-packages (from pandas==2.2.2) (2.0.1)\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in /opt/conda/lib/python3.11/site-packages (from pandas==2.2.2) (2.9.0)\n",
      "Requirement already satisfied: pytz>=2020.1 in /opt/conda/lib/python3.11/site-packages (from pandas==2.2.2) (2024.1)\n",
      "Requirement already satisfied: tzdata>=2022.7 in /opt/conda/lib/python3.11/site-packages (from pandas==2.2.2) (2024.1)\n",
      "Requirement already satisfied: six>=1.5 in /opt/conda/lib/python3.11/site-packages (from python-dateutil>=2.8.2->pandas==2.2.2) (1.16.0)\n",
      "Requirement already satisfied: nbformat in /opt/conda/lib/python3.11/site-packages (5.10.4)\n",
      "Requirement already satisfied: fastjsonschema>=2.15 in /opt/conda/lib/python3.11/site-packages (from nbformat) (2.19.1)\n",
      "Requirement already satisfied: jsonschema>=2.6 in /opt/conda/lib/python3.11/site-packages (from nbformat) (4.22.0)\n",
      "Requirement already satisfied: jupyter-core!=5.0.*,>=4.12 in /opt/conda/lib/python3.11/site-packages (from nbformat) (5.7.2)\n",
      "Requirement already satisfied: traitlets>=5.1 in /opt/conda/lib/python3.11/site-packages (from nbformat) (5.14.3)\n",
      "Requirement already satisfied: attrs>=22.2.0 in /opt/conda/lib/python3.11/site-packages (from jsonschema>=2.6->nbformat) (23.2.0)\n",
      "Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /opt/conda/lib/python3.11/site-packages (from jsonschema>=2.6->nbformat) (2023.12.1)\n",
      "Requirement already satisfied: referencing>=0.28.4 in /opt/conda/lib/python3.11/site-packages (from jsonschema>=2.6->nbformat) (0.35.1)\n",
      "Requirement already satisfied: rpds-py>=0.7.1 in /opt/conda/lib/python3.11/site-packages (from jsonschema>=2.6->nbformat) (0.18.0)\n",
      "Requirement already satisfied: platformdirs>=2.5 in /opt/conda/lib/python3.11/site-packages (from jupyter-core!=5.0.*,>=4.12->nbformat) (4.2.1)\n"
     ]
    }
   ],
   "source": [
    "!pip install yfinance==0.2.38\n",
    "!pip install pandas==2.2.2\n",
    "!pip install nbformat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: yfinance in /opt/conda/lib/python3.11/site-packages (0.2.38)\n",
      "Requirement already satisfied: pandas>=1.3.0 in /opt/conda/lib/python3.11/site-packages (from yfinance) (2.2.2)\n",
      "Requirement already satisfied: numpy>=1.16.5 in /opt/conda/lib/python3.11/site-packages (from yfinance) (2.0.1)\n",
      "Requirement already satisfied: requests>=2.31 in /opt/conda/lib/python3.11/site-packages (from yfinance) (2.31.0)\n",
      "Requirement already satisfied: multitasking>=0.0.7 in /opt/conda/lib/python3.11/site-packages (from yfinance) (0.0.11)\n",
      "Requirement already satisfied: lxml>=4.9.1 in /opt/conda/lib/python3.11/site-packages (from yfinance) (5.3.0)\n",
      "Requirement already satisfied: appdirs>=1.4.4 in /opt/conda/lib/python3.11/site-packages (from yfinance) (1.4.4)\n",
      "Requirement already satisfied: pytz>=2022.5 in /opt/conda/lib/python3.11/site-packages (from yfinance) (2024.1)\n",
      "Requirement already satisfied: frozendict>=2.3.4 in /opt/conda/lib/python3.11/site-packages (from yfinance) (2.4.4)\n",
      "Requirement already satisfied: peewee>=3.16.2 in /opt/conda/lib/python3.11/site-packages (from yfinance) (3.17.6)\n",
      "Requirement already satisfied: beautifulsoup4>=4.11.1 in /opt/conda/lib/python3.11/site-packages (from yfinance) (4.12.3)\n",
      "Requirement already satisfied: html5lib>=1.1 in /opt/conda/lib/python3.11/site-packages (from yfinance) (1.1)\n",
      "Requirement already satisfied: soupsieve>1.2 in /opt/conda/lib/python3.11/site-packages (from beautifulsoup4>=4.11.1->yfinance) (2.5)\n",
      "Requirement already satisfied: six>=1.9 in /opt/conda/lib/python3.11/site-packages (from html5lib>=1.1->yfinance) (1.16.0)\n",
      "Requirement already satisfied: webencodings in /opt/conda/lib/python3.11/site-packages (from html5lib>=1.1->yfinance) (0.5.1)\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in /opt/conda/lib/python3.11/site-packages (from pandas>=1.3.0->yfinance) (2.9.0)\n",
      "Requirement already satisfied: tzdata>=2022.7 in /opt/conda/lib/python3.11/site-packages (from pandas>=1.3.0->yfinance) (2024.1)\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.11/site-packages (from requests>=2.31->yfinance) (3.3.2)\n",
      "Requirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.11/site-packages (from requests>=2.31->yfinance) (3.7)\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.11/site-packages (from requests>=2.31->yfinance) (2.2.1)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.11/site-packages (from requests>=2.31->yfinance) (2024.6.2)\n",
      "Collecting bs4\n",
      "  Downloading bs4-0.0.2-py2.py3-none-any.whl.metadata (411 bytes)\n",
      "Requirement already satisfied: beautifulsoup4 in /opt/conda/lib/python3.11/site-packages (from bs4) (4.12.3)\n",
      "Requirement already satisfied: soupsieve>1.2 in /opt/conda/lib/python3.11/site-packages (from beautifulsoup4->bs4) (2.5)\n",
      "Downloading bs4-0.0.2-py2.py3-none-any.whl (1.2 kB)\n",
      "Installing collected packages: bs4\n",
      "Successfully installed bs4-0.0.2\n",
      "Requirement already satisfied: nbformat in /opt/conda/lib/python3.11/site-packages (5.10.4)\n",
      "Requirement already satisfied: fastjsonschema>=2.15 in /opt/conda/lib/python3.11/site-packages (from nbformat) (2.19.1)\n",
      "Requirement already satisfied: jsonschema>=2.6 in /opt/conda/lib/python3.11/site-packages (from nbformat) (4.22.0)\n",
      "Requirement already satisfied: jupyter-core!=5.0.*,>=4.12 in /opt/conda/lib/python3.11/site-packages (from nbformat) (5.7.2)\n",
      "Requirement already satisfied: traitlets>=5.1 in /opt/conda/lib/python3.11/site-packages (from nbformat) (5.14.3)\n",
      "Requirement already satisfied: attrs>=22.2.0 in /opt/conda/lib/python3.11/site-packages (from jsonschema>=2.6->nbformat) (23.2.0)\n",
      "Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /opt/conda/lib/python3.11/site-packages (from jsonschema>=2.6->nbformat) (2023.12.1)\n",
      "Requirement already satisfied: referencing>=0.28.4 in /opt/conda/lib/python3.11/site-packages (from jsonschema>=2.6->nbformat) (0.35.1)\n",
      "Requirement already satisfied: rpds-py>=0.7.1 in /opt/conda/lib/python3.11/site-packages (from jsonschema>=2.6->nbformat) (0.18.0)\n",
      "Requirement already satisfied: platformdirs>=2.5 in /opt/conda/lib/python3.11/site-packages (from jupyter-core!=5.0.*,>=4.12->nbformat) (4.2.1)\n"
     ]
    }
   ],
   "source": [
    "!pip install yfinance\n",
    "!pip install bs4\n",
    "!pip install nbformat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "import requests\n",
    "from bs4 import BeautifulSoup\n",
    "import plotly.graph_objects as go\n",
    "from plotly.subplots import make_subplots"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In Python, you can ignore warnings using the warnings module. You can use the filterwarnings function to filter or ignore specific warning messages or categories.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import warnings\n",
    "# Ignore all warnings\n",
    "warnings.filterwarnings(\"ignore\", category=FutureWarning)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Define Graphing Function\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this section, we define the function `make_graph`. **You don't have to know how the function works, you should only care about the inputs. It takes a dataframe with stock data (dataframe must contain Date and Close columns), a dataframe with revenue data (dataframe must contain Date and Revenue columns), and the name of the stock.**\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def make_graph(stock_data, revenue_data, stock):\n",
    "    fig = make_subplots(rows=2, cols=1, shared_xaxes=True, subplot_titles=(\"Historical Share Price\", \"Historical Revenue\"), vertical_spacing = .3)\n",
    "    stock_data_specific = stock_data[stock_data.Date <= '2021--06-14']\n",
    "    revenue_data_specific = revenue_data[revenue_data.Date <= '2021-04-30']\n",
    "    fig.add_trace(go.Scatter(x=pd.to_datetime(stock_data_specific.Date), y=stock_data_specific.Close.astype(\"float\"), name=\"Share Price\"), row=1, col=1)\n",
    "    fig.add_trace(go.Scatter(x=pd.to_datetime(revenue_data_specific.Date), y=revenue_data_specific.Revenue.astype(\"float\"), name=\"Revenue\"), row=2, col=1)\n",
    "    fig.update_xaxes(title_text=\"Date\", row=1, col=1)\n",
    "    fig.update_xaxes(title_text=\"Date\", row=2, col=1)\n",
    "    fig.update_yaxes(title_text=\"Price ($US)\", row=1, col=1)\n",
    "    fig.update_yaxes(title_text=\"Revenue ($US Millions)\", row=2, col=1)\n",
    "    fig.update_layout(showlegend=False,\n",
    "    height=900,\n",
    "    title=stock,\n",
    "    xaxis_rangeslider_visible=True)\n",
    "    fig.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Use the make_graph function that we’ve already defined. You’ll need to invoke it in questions 5 and 6 to display the graphs and create the dashboard. \n",
    "> **Note: You don’t need to redefine the function for plotting graphs anywhere else in this notebook; just use the existing function.**\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Question 1: Use yfinance to Extract Stock Data\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Using the `Ticker` function enter the ticker symbol of the stock we want to extract data on to create a ticker object. The stock is Tesla and its ticker symbol is `TSLA`.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tesla Info:\n",
      "{'address1': '1 Tesla Road', 'city': 'Austin', 'state': 'TX', 'zip': '78725', 'country': 'United States', 'phone': '512 516 8177', 'website': 'https://www.tesla.com', 'industry': 'Auto Manufacturers', 'industryKey': 'auto-manufacturers', 'industryDisp': 'Auto Manufacturers', 'sector': 'Consumer Cyclical', 'sectorKey': 'consumer-cyclical', 'sectorDisp': 'Consumer Cyclical', 'longBusinessSummary': 'Tesla, Inc. designs, develops, manufactures, leases, and sells electric vehicles, and energy generation and storage systems in the United States, China, and internationally. The company operates in two segments, Automotive, and Energy Generation and Storage. The Automotive segment offers electric vehicles, as well as sells automotive regulatory credits; and non-warranty after-sales vehicle, used vehicles, body shop and parts, supercharging, retail merchandise, and vehicle insurance services. This segment also provides sedans and sport utility vehicles through direct and used vehicle sales, a network of Tesla Superchargers, and in-app upgrades; purchase financing and leasing services; services for electric vehicles through its company-owned service locations and Tesla mobile service technicians; and vehicle limited warranties and extended service plans. The Energy Generation and Storage segment engages in the design, manufacture, installation, sale, and leasing of solar energy generation and energy storage products, and related services to residential, commercial, and industrial customers and utilities through its website, stores, and galleries, as well as through a network of channel partners; and provision of service and repairs to its energy product customers, including under warranty, as well as various financing options to its solar customers. The company was formerly known as Tesla Motors, Inc. and changed its name to Tesla, Inc. in February 2017. Tesla, Inc. was incorporated in 2003 and is headquartered in Austin, Texas.', 'fullTimeEmployees': 140473, 'companyOfficers': [{'maxAge': 1, 'name': 'Mr. Elon R. Musk', 'age': 51, 'title': 'Co-Founder, Technoking of Tesla, CEO & Director', 'yearBorn': 1972, 'fiscalYear': 2023, 'exercisedValue': 1861335, 'unexercisedValue': 68433694720}, {'maxAge': 1, 'name': 'Mr. Vaibhav  Taneja', 'age': 45, 'title': 'Chief Financial Officer', 'yearBorn': 1978, 'fiscalYear': 2023, 'totalPay': 278000, 'exercisedValue': 8517957, 'unexercisedValue': 202075632}, {'maxAge': 1, 'name': 'Mr. Xiaotong  Zhu', 'age': 43, 'title': 'Senior Vice President of Automotive', 'yearBorn': 1980, 'fiscalYear': 2023, 'totalPay': 926877, 'exercisedValue': 0, 'unexercisedValue': 344144320}, {'maxAge': 1, 'name': 'Mr. Martin  Viecha', 'title': 'Vice President of Investor Relations', 'fiscalYear': 2023, 'exercisedValue': 0, 'unexercisedValue': 0}, {'maxAge': 1, 'name': 'Brian  Scelfo', 'title': 'Senior Director of Corporate Development', 'fiscalYear': 2023, 'exercisedValue': 0, 'unexercisedValue': 0}, {'maxAge': 1, 'name': 'Mr. Franz  von Holzhausen', 'title': 'Chief Designer', 'fiscalYear': 2023, 'exercisedValue': 0, 'unexercisedValue': 0}, {'maxAge': 1, 'name': 'Mr. John  Walker', 'age': 60, 'title': 'Vice President of Sales - North America', 'yearBorn': 1963, 'fiscalYear': 2023, 'totalPay': 121550, 'exercisedValue': 0, 'unexercisedValue': 0}, {'maxAge': 1, 'name': 'Mr. Peter  Bannon', 'title': 'Chip Architect', 'fiscalYear': 2023, 'exercisedValue': 0, 'unexercisedValue': 0}, {'maxAge': 1, 'name': 'Mr. Turner  Caldwell', 'title': 'Engineering Manager', 'fiscalYear': 2023, 'exercisedValue': 0, 'unexercisedValue': 0}, {'maxAge': 1, 'name': 'Mr. Rodney D. Westmoreland Jr.', 'title': 'Director of Construction Management', 'fiscalYear': 2023, 'exercisedValue': 0, 'unexercisedValue': 0}], 'auditRisk': 7, 'boardRisk': 9, 'compensationRisk': 10, 'shareHolderRightsRisk': 9, 'overallRisk': 10, 'governanceEpochDate': 1722470400, 'compensationAsOfEpochDate': 1703980800, 'maxAge': 86400, 'priceHint': 2, 'previousClose': 198.84, 'open': 197.02, 'dayLow': 195.11, 'dayHigh': 200.88, 'regularMarketPreviousClose': 198.84, 'regularMarketOpen': 197.02, 'regularMarketDayLow': 195.11, 'regularMarketDayHigh': 200.88, 'beta': 2.313, 'trailingPE': 56.179775, 'forwardPE': 63.291138, 'volume': 58648274, 'regularMarketVolume': 58648274, 'averageVolume': 95507375, 'averageVolume10days': 83283630, 'averageDailyVolume10Day': 83283630, 'bid': 199.61, 'ask': 200.01, 'bidSize': 100, 'askSize': 100, 'marketCap': 638927962112, 'fiftyTwoWeekLow': 138.8, 'fiftyTwoWeekHigh': 278.98, 'priceToSalesTrailing12Months': 6.7031198, 'fiftyDayAverage': 210.5474, 'twoHundredDayAverage': 203.1863, 'currency': 'USD', 'enterpriseValue': 621518061568, 'profitMargins': 0.12996, 'floatShares': 2777644002, 'sharesOutstanding': 3194639872, 'sharesShort': 104460574, 'sharesShortPriorMonth': 105382772, 'sharesShortPreviousMonthDate': 1718323200, 'dateShortInterest': 1721001600, 'sharesPercentSharesOut': 0.0327, 'heldPercentInsiders': 0.12986, 'heldPercentInstitutions': 0.46063998, 'shortRatio': 0.86, 'shortPercentOfFloat': 0.0375, 'impliedSharesOutstanding': 3194639872, 'bookValue': 20.81, 'priceToBook': 9.6107645, 'lastFiscalYearEnd': 1703980800, 'nextFiscalYearEnd': 1735603200, 'mostRecentQuarter': 1719705600, 'earningsQuarterlyGrowth': -0.453, 'netIncomeToCommon': 12389999616, 'trailingEps': 3.56, 'forwardEps': 3.16, 'pegRatio': 28.49, 'lastSplitFactor': '3:1', 'lastSplitDate': 1661385600, 'enterpriseToRevenue': 6.52, 'enterpriseToEbitda': 51.036, '52WeekChange': -0.16583252, 'SandP52WeekChange': 0.19031036, 'exchange': 'NMS', 'quoteType': 'EQUITY', 'symbol': 'TSLA', 'underlyingSymbol': 'TSLA', 'shortName': 'Tesla, Inc.', 'longName': 'Tesla, Inc.', 'firstTradeDateEpochUtc': 1277818200, 'timeZoneFullName': 'America/New_York', 'timeZoneShortName': 'EDT', 'uuid': 'ec367bc4-f92c-397c-ac81-bf7b43cffaf7', 'messageBoardId': 'finmb_27444752', 'gmtOffSetMilliseconds': -14400000, 'currentPrice': 200.0, 'targetHighPrice': 310.0, 'targetLowPrice': 24.86, 'targetMeanPrice': 207.64, 'targetMedianPrice': 220.5, 'recommendationMean': 2.8, 'recommendationKey': 'hold', 'numberOfAnalystOpinions': 42, 'totalCash': 30720000000, 'totalCashPerShare': 9.616, 'ebitda': 12177999872, 'totalDebt': 12515000320, 'quickRatio': 1.249, 'currentRatio': 1.911, 'totalRevenue': 95317999616, 'debtToEquity': 18.606, 'revenuePerShare': 29.932, 'returnOnAssets': 0.044159997, 'returnOnEquity': 0.20861, 'freeCashflow': -907249984, 'operatingCashflow': 11532000256, 'earningsGrowth': -0.462, 'revenueGrowth': 0.023, 'grossMargins': 0.17719999, 'ebitdaMargins': 0.12776, 'operatingMargins': 0.0858, 'financialCurrency': 'USD', 'trailingPegRatio': 3.7106}\n",
      "\n",
      "Tesla Historical Data:\n",
      "                                 Open        High         Low       Close  \\\n",
      "Date                                                                        \n",
      "2024-07-10 00:00:00-04:00  262.799988  267.589996  257.859985  263.260010   \n",
      "2024-07-11 00:00:00-04:00  263.299988  271.000000  239.649994  241.029999   \n",
      "2024-07-12 00:00:00-04:00  235.800003  251.839996  233.089996  248.229996   \n",
      "2024-07-15 00:00:00-04:00  255.970001  265.600006  251.729996  252.639999   \n",
      "2024-07-16 00:00:00-04:00  255.309998  258.619995  245.800003  256.559998   \n",
      "2024-07-17 00:00:00-04:00  252.729996  258.470001  246.179993  248.500000   \n",
      "2024-07-18 00:00:00-04:00  251.089996  257.140015  247.199997  249.229996   \n",
      "2024-07-19 00:00:00-04:00  247.789993  249.440002  236.830002  239.199997   \n",
      "2024-07-22 00:00:00-04:00  244.210007  253.210007  243.750000  251.509995   \n",
      "2024-07-23 00:00:00-04:00  253.600006  255.759995  245.630005  246.380005   \n",
      "2024-07-24 00:00:00-04:00  225.419998  225.990005  214.710007  215.990005   \n",
      "2024-07-25 00:00:00-04:00  216.800003  226.000000  216.229996  220.250000   \n",
      "2024-07-26 00:00:00-04:00  221.190002  222.279999  215.330002  219.800003   \n",
      "2024-07-29 00:00:00-04:00  224.899994  234.270004  224.699997  232.100006   \n",
      "2024-07-30 00:00:00-04:00  232.250000  232.410004  220.000000  222.619995   \n",
      "2024-07-31 00:00:00-04:00  227.899994  234.679993  226.789993  232.070007   \n",
      "2024-08-01 00:00:00-04:00  227.690002  231.869995  214.330002  216.860001   \n",
      "2024-08-02 00:00:00-04:00  214.880005  216.130005  205.779999  207.669998   \n",
      "2024-08-05 00:00:00-04:00  185.220001  203.880005  182.000000  198.880005   \n",
      "2024-08-06 00:00:00-04:00  200.750000  202.899994  192.669998  200.639999   \n",
      "2024-08-07 00:00:00-04:00  200.770004  203.490005  191.479996  191.759995   \n",
      "2024-08-08 00:00:00-04:00  195.699997  200.699997  192.039993  198.839996   \n",
      "2024-08-09 00:00:00-04:00  197.050003  200.880005  195.110001  200.000000   \n",
      "\n",
      "                              Volume  Dividends  Stock Splits  \n",
      "Date                                                           \n",
      "2024-07-10 00:00:00-04:00  128519400        0.0           0.0  \n",
      "2024-07-11 00:00:00-04:00  221707300        0.0           0.0  \n",
      "2024-07-12 00:00:00-04:00  155955800        0.0           0.0  \n",
      "2024-07-15 00:00:00-04:00  146912900        0.0           0.0  \n",
      "2024-07-16 00:00:00-04:00  126332500        0.0           0.0  \n",
      "2024-07-17 00:00:00-04:00  115584800        0.0           0.0  \n",
      "2024-07-18 00:00:00-04:00  110869000        0.0           0.0  \n",
      "2024-07-19 00:00:00-04:00   87403900        0.0           0.0  \n",
      "2024-07-22 00:00:00-04:00  101225400        0.0           0.0  \n",
      "2024-07-23 00:00:00-04:00  111928200        0.0           0.0  \n",
      "2024-07-24 00:00:00-04:00  167942900        0.0           0.0  \n",
      "2024-07-25 00:00:00-04:00  100636500        0.0           0.0  \n",
      "2024-07-26 00:00:00-04:00   94604100        0.0           0.0  \n",
      "2024-07-29 00:00:00-04:00  129201800        0.0           0.0  \n",
      "2024-07-30 00:00:00-04:00  100560300        0.0           0.0  \n",
      "2024-07-31 00:00:00-04:00   67497000        0.0           0.0  \n",
      "2024-08-01 00:00:00-04:00   83861900        0.0           0.0  \n",
      "2024-08-02 00:00:00-04:00   82880100        0.0           0.0  \n",
      "2024-08-05 00:00:00-04:00  100308800        0.0           0.0  \n",
      "2024-08-06 00:00:00-04:00   73783900        0.0           0.0  \n",
      "2024-08-07 00:00:00-04:00   71159800        0.0           0.0  \n",
      "2024-08-08 00:00:00-04:00   65033900        0.0           0.0  \n",
      "2024-08-09 00:00:00-04:00   58548800        0.0           0.0  \n",
      "\n",
      "Tesla Financials:\n",
      "                                                       2023-12-31  \\\n",
      "Tax Effect Of Unusual Items                                   0.0   \n",
      "Tax Rate For Calcs                                           0.21   \n",
      "Normalized EBITDA                                   14796000000.0   \n",
      "Total Unusual Items                                           0.0   \n",
      "Total Unusual Items Excluding Goodwill                        0.0   \n",
      "Net Income From Continuing Operation Net Minori...  14999000000.0   \n",
      "Reconciled Depreciation                              4667000000.0   \n",
      "Reconciled Cost Of Revenue                          79113000000.0   \n",
      "EBITDA                                              14796000000.0   \n",
      "EBIT                                                10129000000.0   \n",
      "Net Interest Income                                   910000000.0   \n",
      "Interest Expense                                      156000000.0   \n",
      "Interest Income                                      1066000000.0   \n",
      "Normalized Income                                   14999000000.0   \n",
      "Net Income From Continuing And Discontinued Ope...  14999000000.0   \n",
      "Total Expenses                                      87882000000.0   \n",
      "Rent Expense Supplemental                            1268000000.0   \n",
      "Total Operating Income As Reported                   8891000000.0   \n",
      "Diluted Average Shares                               3482750000.0   \n",
      "Basic Average Shares                                 3173500000.0   \n",
      "Diluted EPS                                                  4.31   \n",
      "Basic EPS                                                4.725697   \n",
      "Diluted NI Availto Com Stockholders                 14999000000.0   \n",
      "Average Dilution Earnings                                     0.0   \n",
      "Net Income Common Stockholders                      14999000000.0   \n",
      "Otherunder Preferred Stock Dividend                           NaN   \n",
      "Net Income                                          14999000000.0   \n",
      "Minority Interests                                     25000000.0   \n",
      "Net Income Including Noncontrolling Interests       14974000000.0   \n",
      "Net Income Continuous Operations                    14974000000.0   \n",
      "Tax Provision                                       -5001000000.0   \n",
      "Pretax Income                                        9973000000.0   \n",
      "Other Income Expense                                  172000000.0   \n",
      "Other Non Operating Income Expenses                   172000000.0   \n",
      "Special Income Charges                                        0.0   \n",
      "Restructuring And Mergern Acquisition                         0.0   \n",
      "Net Non Operating Interest Income Expense             910000000.0   \n",
      "Interest Expense Non Operating                        156000000.0   \n",
      "Interest Income Non Operating                        1066000000.0   \n",
      "Operating Income                                     8891000000.0   \n",
      "Operating Expense                                    8769000000.0   \n",
      "Research And Development                             3969000000.0   \n",
      "Selling General And Administration                   4800000000.0   \n",
      "Gross Profit                                        17660000000.0   \n",
      "Cost Of Revenue                                     79113000000.0   \n",
      "Total Revenue                                       96773000000.0   \n",
      "Operating Revenue                                   96773000000.0   \n",
      "\n",
      "                                                       2022-12-31  \\\n",
      "Tax Effect Of Unusual Items                           -14080000.0   \n",
      "Tax Rate For Calcs                                           0.08   \n",
      "Normalized EBITDA                                   17833000000.0   \n",
      "Total Unusual Items                                  -176000000.0   \n",
      "Total Unusual Items Excluding Goodwill               -176000000.0   \n",
      "Net Income From Continuing Operation Net Minori...  12583000000.0   \n",
      "Reconciled Depreciation                              3747000000.0   \n",
      "Reconciled Cost Of Revenue                          60609000000.0   \n",
      "EBITDA                                              17657000000.0   \n",
      "EBIT                                                13910000000.0   \n",
      "Net Interest Income                                   106000000.0   \n",
      "Interest Expense                                      191000000.0   \n",
      "Interest Income                                       297000000.0   \n",
      "Normalized Income                                   12744920000.0   \n",
      "Net Income From Continuing And Discontinued Ope...  12583000000.0   \n",
      "Total Expenses                                      67630000000.0   \n",
      "Rent Expense Supplemental                            1509000000.0   \n",
      "Total Operating Income As Reported                  13656000000.0   \n",
      "Diluted Average Shares                               3475000000.0   \n",
      "Basic Average Shares                                 3130000000.0   \n",
      "Diluted EPS                                                  3.62   \n",
      "Basic EPS                                                    4.02   \n",
      "Diluted NI Availto Com Stockholders                 12584000000.0   \n",
      "Average Dilution Earnings                               1000000.0   \n",
      "Net Income Common Stockholders                      12583000000.0   \n",
      "Otherunder Preferred Stock Dividend                           NaN   \n",
      "Net Income                                          12583000000.0   \n",
      "Minority Interests                                     -4000000.0   \n",
      "Net Income Including Noncontrolling Interests       12587000000.0   \n",
      "Net Income Continuous Operations                    12587000000.0   \n",
      "Tax Provision                                        1132000000.0   \n",
      "Pretax Income                                       13719000000.0   \n",
      "Other Income Expense                                 -219000000.0   \n",
      "Other Non Operating Income Expenses                   -43000000.0   \n",
      "Special Income Charges                               -176000000.0   \n",
      "Restructuring And Mergern Acquisition                 176000000.0   \n",
      "Net Non Operating Interest Income Expense             106000000.0   \n",
      "Interest Expense Non Operating                        191000000.0   \n",
      "Interest Income Non Operating                         297000000.0   \n",
      "Operating Income                                    13832000000.0   \n",
      "Operating Expense                                    7021000000.0   \n",
      "Research And Development                             3075000000.0   \n",
      "Selling General And Administration                   3946000000.0   \n",
      "Gross Profit                                        20853000000.0   \n",
      "Cost Of Revenue                                     60609000000.0   \n",
      "Total Revenue                                       81462000000.0   \n",
      "Operating Revenue                                   81462000000.0   \n",
      "\n",
      "                                                       2021-12-31  \\\n",
      "Tax Effect Of Unusual Items                             2970000.0   \n",
      "Tax Rate For Calcs                                           0.11   \n",
      "Normalized EBITDA                                    9598000000.0   \n",
      "Total Unusual Items                                    27000000.0   \n",
      "Total Unusual Items Excluding Goodwill                 27000000.0   \n",
      "Net Income From Continuing Operation Net Minori...   5524000000.0   \n",
      "Reconciled Depreciation                              2911000000.0   \n",
      "Reconciled Cost Of Revenue                          40217000000.0   \n",
      "EBITDA                                               9625000000.0   \n",
      "EBIT                                                 6714000000.0   \n",
      "Net Interest Income                                  -315000000.0   \n",
      "Interest Expense                                      371000000.0   \n",
      "Interest Income                                        56000000.0   \n",
      "Normalized Income                                    5499970000.0   \n",
      "Net Income From Continuing And Discontinued Ope...   5524000000.0   \n",
      "Total Expenses                                      47327000000.0   \n",
      "Rent Expense Supplemental                             978000000.0   \n",
      "Total Operating Income As Reported                   6523000000.0   \n",
      "Diluted Average Shares                               3386000000.0   \n",
      "Basic Average Shares                                 2959000000.0   \n",
      "Diluted EPS                                                  1.63   \n",
      "Basic EPS                                                    1.87   \n",
      "Diluted NI Availto Com Stockholders                  5533000000.0   \n",
      "Average Dilution Earnings                               9000000.0   \n",
      "Net Income Common Stockholders                       5524000000.0   \n",
      "Otherunder Preferred Stock Dividend                    -5000000.0   \n",
      "Net Income                                           5524000000.0   \n",
      "Minority Interests                                   -120000000.0   \n",
      "Net Income Including Noncontrolling Interests        5644000000.0   \n",
      "Net Income Continuous Operations                     5644000000.0   \n",
      "Tax Provision                                         699000000.0   \n",
      "Pretax Income                                        6343000000.0   \n",
      "Other Income Expense                                  162000000.0   \n",
      "Other Non Operating Income Expenses                   135000000.0   \n",
      "Special Income Charges                                 27000000.0   \n",
      "Restructuring And Mergern Acquisition                 -27000000.0   \n",
      "Net Non Operating Interest Income Expense            -315000000.0   \n",
      "Interest Expense Non Operating                        371000000.0   \n",
      "Interest Income Non Operating                          56000000.0   \n",
      "Operating Income                                     6496000000.0   \n",
      "Operating Expense                                    7110000000.0   \n",
      "Research And Development                             2593000000.0   \n",
      "Selling General And Administration                   4517000000.0   \n",
      "Gross Profit                                        13606000000.0   \n",
      "Cost Of Revenue                                     40217000000.0   \n",
      "Total Revenue                                       53823000000.0   \n",
      "Operating Revenue                                   53823000000.0   \n",
      "\n",
      "                                                       2020-12-31 2019-12-31  \n",
      "Tax Effect Of Unusual Items                                   0.0        NaN  \n",
      "Tax Rate For Calcs                                           0.25        NaN  \n",
      "Normalized EBITDA                                    4224000000.0        NaN  \n",
      "Total Unusual Items                                           0.0        NaN  \n",
      "Total Unusual Items Excluding Goodwill                        0.0        NaN  \n",
      "Net Income From Continuing Operation Net Minori...    721000000.0        NaN  \n",
      "Reconciled Depreciation                              2322000000.0        NaN  \n",
      "Reconciled Cost Of Revenue                          24906000000.0        NaN  \n",
      "EBITDA                                               4224000000.0        NaN  \n",
      "EBIT                                                 1902000000.0        NaN  \n",
      "Net Interest Income                                  -718000000.0        NaN  \n",
      "Interest Expense                                      748000000.0        NaN  \n",
      "Interest Income                                        30000000.0        NaN  \n",
      "Normalized Income                                     721000000.0        NaN  \n",
      "Net Income From Continuing And Discontinued Ope...    721000000.0        NaN  \n",
      "Total Expenses                                      29542000000.0        NaN  \n",
      "Rent Expense Supplemental                             563000000.0        NaN  \n",
      "Total Operating Income As Reported                  -1994000000.0        NaN  \n",
      "Diluted Average Shares                               2880000000.0        NaN  \n",
      "Basic Average Shares                                 2880000000.0        NaN  \n",
      "Diluted EPS                                              0.213333        NaN  \n",
      "Basic EPS                                                0.246667        NaN  \n",
      "Diluted NI Availto Com Stockholders                   690000000.0        NaN  \n",
      "Average Dilution Earnings                                     0.0        NaN  \n",
      "Net Income Common Stockholders                        690000000.0        NaN  \n",
      "Otherunder Preferred Stock Dividend                    31000000.0  8000000.0  \n",
      "Net Income                                            721000000.0        NaN  \n",
      "Minority Interests                                   -141000000.0        NaN  \n",
      "Net Income Including Noncontrolling Interests         862000000.0        NaN  \n",
      "Net Income Continuous Operations                      862000000.0        NaN  \n",
      "Tax Provision                                         292000000.0        NaN  \n",
      "Pretax Income                                        1154000000.0        NaN  \n",
      "Other Income Expense                                 -122000000.0        NaN  \n",
      "Other Non Operating Income Expenses                  -122000000.0        NaN  \n",
      "Special Income Charges                                        0.0        NaN  \n",
      "Restructuring And Mergern Acquisition                         0.0        NaN  \n",
      "Net Non Operating Interest Income Expense            -718000000.0        NaN  \n",
      "Interest Expense Non Operating                        748000000.0        NaN  \n",
      "Interest Income Non Operating                          30000000.0        NaN  \n",
      "Operating Income                                     1994000000.0        NaN  \n",
      "Operating Expense                                    4636000000.0        NaN  \n",
      "Research And Development                             1491000000.0        NaN  \n",
      "Selling General And Administration                   3145000000.0        NaN  \n",
      "Gross Profit                                         6630000000.0        NaN  \n",
      "Cost Of Revenue                                     24906000000.0        NaN  \n",
      "Total Revenue                                       31536000000.0        NaN  \n",
      "Operating Revenue                                   31536000000.0        NaN  \n",
      "\n",
      "Tesla Balance Sheet:\n",
      "                                                     2023-12-31  \\\n",
      "Treasury Shares Number                                      0.0   \n",
      "Ordinary Shares Number                             3185000000.0   \n",
      "Share Issued                                       3185000000.0   \n",
      "Net Debt                                                    NaN   \n",
      "Total Debt                                         9573000000.0   \n",
      "...                                                         ...   \n",
      "Cash Cash Equivalents And Short Term Investments  29094000000.0   \n",
      "Other Short Term Investments                      12696000000.0   \n",
      "Cash And Cash Equivalents                         16398000000.0   \n",
      "Cash Equivalents                                    495000000.0   \n",
      "Cash Financial                                    15903000000.0   \n",
      "\n",
      "                                                     2022-12-31  \\\n",
      "Treasury Shares Number                                      NaN   \n",
      "Ordinary Shares Number                             3164000000.0   \n",
      "Share Issued                                       3164000000.0   \n",
      "Net Debt                                                    NaN   \n",
      "Total Debt                                         5748000000.0   \n",
      "...                                                         ...   \n",
      "Cash Cash Equivalents And Short Term Investments  22185000000.0   \n",
      "Other Short Term Investments                       5932000000.0   \n",
      "Cash And Cash Equivalents                         16253000000.0   \n",
      "Cash Equivalents                                   2288000000.0   \n",
      "Cash Financial                                    13965000000.0   \n",
      "\n",
      "                                                     2021-12-31  \\\n",
      "Treasury Shares Number                                      NaN   \n",
      "Ordinary Shares Number                             3099000000.0   \n",
      "Share Issued                                       3099000000.0   \n",
      "Net Debt                                                    NaN   \n",
      "Total Debt                                         8873000000.0   \n",
      "...                                                         ...   \n",
      "Cash Cash Equivalents And Short Term Investments  17707000000.0   \n",
      "Other Short Term Investments                        131000000.0   \n",
      "Cash And Cash Equivalents                         17576000000.0   \n",
      "Cash Equivalents                                   9548000000.0   \n",
      "Cash Financial                                     8028000000.0   \n",
      "\n",
      "                                                     2020-12-31    2019-12-31  \n",
      "Treasury Shares Number                                      NaN           NaN  \n",
      "Ordinary Shares Number                             2880000000.0           NaN  \n",
      "Share Issued                                       2880000000.0           NaN  \n",
      "Net Debt                                                    NaN  5533000000.0  \n",
      "Total Debt                                        13279000000.0           NaN  \n",
      "...                                                         ...           ...  \n",
      "Cash Cash Equivalents And Short Term Investments  19384000000.0           NaN  \n",
      "Other Short Term Investments                                0.0           NaN  \n",
      "Cash And Cash Equivalents                         19384000000.0           NaN  \n",
      "Cash Equivalents                                            NaN           NaN  \n",
      "Cash Financial                                              NaN           NaN  \n",
      "\n",
      "[84 rows x 5 columns]\n",
      "\n",
      "Tesla Cash Flow:\n",
      "                                                   2023-12-31     2022-12-31  \\\n",
      "Free Cash Flow                                   4357000000.0   7552000000.0   \n",
      "Repayment Of Debt                               -1815000000.0  -3866000000.0   \n",
      "Issuance Of Debt                                 3931000000.0            0.0   \n",
      "Issuance Of Capital Stock                                 NaN            0.0   \n",
      "Capital Expenditure                             -8899000000.0  -7172000000.0   \n",
      "Interest Paid Supplemental Data                   126000000.0    152000000.0   \n",
      "Income Tax Paid Supplemental Data                1119000000.0   1203000000.0   \n",
      "End Cash Position                               17189000000.0  16924000000.0   \n",
      "Beginning Cash Position                         16924000000.0  18144000000.0   \n",
      "Effect Of Exchange Rate Changes                     4000000.0   -444000000.0   \n",
      "Changes In Cash                                   261000000.0   -776000000.0   \n",
      "Financing Cash Flow                              2589000000.0  -3527000000.0   \n",
      "Cash Flow From Continuing Financing Activities   2589000000.0  -3527000000.0   \n",
      "Net Other Financing Charges                      -227000000.0   -202000000.0   \n",
      "Proceeds From Stock Option Exercised              700000000.0    541000000.0   \n",
      "Net Common Stock Issuance                                 NaN            0.0   \n",
      "Common Stock Issuance                                     NaN            0.0   \n",
      "Net Issuance Payments Of Debt                    2116000000.0  -3866000000.0   \n",
      "Net Long Term Debt Issuance                      2116000000.0  -3866000000.0   \n",
      "Long Term Debt Payments                         -1815000000.0  -3866000000.0   \n",
      "Long Term Debt Issuance                          3931000000.0            0.0   \n",
      "Investing Cash Flow                            -15584000000.0 -11973000000.0   \n",
      "Cash Flow From Continuing Investing Activities -15584000000.0 -11973000000.0   \n",
      "Net Other Investing Changes                               NaN     76000000.0   \n",
      "Net Investment Purchase And Sale                -6621000000.0  -5813000000.0   \n",
      "Sale Of Investment                              12491000000.0     22000000.0   \n",
      "Purchase Of Investment                         -19112000000.0  -5835000000.0   \n",
      "Net Business Purchase And Sale                    -64000000.0            0.0   \n",
      "Sale Of Business                                          NaN            0.0   \n",
      "Purchase Of Business                              -64000000.0            0.0   \n",
      "Net Intangibles Purchase And Sale                         0.0    927000000.0   \n",
      "Sale Of Intangibles                                       0.0    936000000.0   \n",
      "Purchase Of Intangibles                                   0.0     -9000000.0   \n",
      "Net PPE Purchase And Sale                       -8899000000.0  -7163000000.0   \n",
      "Purchase Of PPE                                 -8899000000.0  -7163000000.0   \n",
      "Operating Cash Flow                             13256000000.0  14724000000.0   \n",
      "Cash Flow From Continuing Operating Activities  13256000000.0  14724000000.0   \n",
      "Change In Working Capital                       -2248000000.0  -3712000000.0   \n",
      "Change In Other Working Capital                  1532000000.0   1131000000.0   \n",
      "Change In Other Current Liabilities                       NaN   1904000000.0   \n",
      "Change In Other Current Assets                  -1952000000.0  -1570000000.0   \n",
      "Change In Payables And Accrued Expense           2605000000.0   8029000000.0   \n",
      "Change In Payable                                2605000000.0   8029000000.0   \n",
      "Change In Account Payable                        2605000000.0   8029000000.0   \n",
      "Change In Prepaid Assets                        -2652000000.0  -3713000000.0   \n",
      "Change In Inventory                             -1195000000.0  -6465000000.0   \n",
      "Change In Receivables                            -586000000.0  -1124000000.0   \n",
      "Changes In Account Receivables                   -586000000.0  -1124000000.0   \n",
      "Other Non Cash Items                               81000000.0    340000000.0   \n",
      "Stock Based Compensation                         1812000000.0   1560000000.0   \n",
      "Asset Impairment Charge                           463000000.0    177000000.0   \n",
      "Deferred Tax                                    -6349000000.0   -196000000.0   \n",
      "Deferred Income Tax                             -6349000000.0   -196000000.0   \n",
      "Depreciation Amortization Depletion              4667000000.0   3747000000.0   \n",
      "Depreciation And Amortization                    4667000000.0   3747000000.0   \n",
      "Depreciation                                     4667000000.0   3747000000.0   \n",
      "Operating Gains Losses                           -144000000.0    221000000.0   \n",
      "Net Foreign Currency Exchange Gain Loss          -144000000.0     81000000.0   \n",
      "Gain Loss On Sale Of PPE                                  0.0    140000000.0   \n",
      "Net Income From Continuing Operations           14974000000.0  12587000000.0   \n",
      "\n",
      "                                                   2021-12-31     2020-12-31  \\\n",
      "Free Cash Flow                                   3483000000.0   2701000000.0   \n",
      "Repayment Of Debt                              -14615000000.0 -12201000000.0   \n",
      "Issuance Of Debt                                 8883000000.0   9713000000.0   \n",
      "Issuance Of Capital Stock                                 0.0  12269000000.0   \n",
      "Capital Expenditure                             -8014000000.0  -3242000000.0   \n",
      "Interest Paid Supplemental Data                   266000000.0    444000000.0   \n",
      "Income Tax Paid Supplemental Data                 561000000.0    115000000.0   \n",
      "End Cash Position                               18144000000.0  19901000000.0   \n",
      "Beginning Cash Position                         19901000000.0   6783000000.0   \n",
      "Effect Of Exchange Rate Changes                  -183000000.0    334000000.0   \n",
      "Changes In Cash                                 -1574000000.0  12784000000.0   \n",
      "Financing Cash Flow                             -5203000000.0   9973000000.0   \n",
      "Cash Flow From Continuing Financing Activities  -5203000000.0   9973000000.0   \n",
      "Net Other Financing Charges                      -178000000.0   -225000000.0   \n",
      "Proceeds From Stock Option Exercised              707000000.0    417000000.0   \n",
      "Net Common Stock Issuance                                 0.0  12269000000.0   \n",
      "Common Stock Issuance                                     0.0  12269000000.0   \n",
      "Net Issuance Payments Of Debt                   -5732000000.0  -2488000000.0   \n",
      "Net Long Term Debt Issuance                     -5732000000.0  -2488000000.0   \n",
      "Long Term Debt Payments                        -14615000000.0 -12201000000.0   \n",
      "Long Term Debt Issuance                          8883000000.0   9713000000.0   \n",
      "Investing Cash Flow                             -7868000000.0  -3132000000.0   \n",
      "Cash Flow From Continuing Investing Activities  -7868000000.0  -3132000000.0   \n",
      "Net Other Investing Changes                         6000000.0    123000000.0   \n",
      "Net Investment Purchase And Sale                 -132000000.0            0.0   \n",
      "Sale Of Investment                                        0.0            NaN   \n",
      "Purchase Of Investment                           -132000000.0            0.0   \n",
      "Net Business Purchase And Sale                            0.0    -13000000.0   \n",
      "Sale Of Business                                          0.0            NaN   \n",
      "Purchase Of Business                                      0.0    -13000000.0   \n",
      "Net Intangibles Purchase And Sale               -1228000000.0    -10000000.0   \n",
      "Sale Of Intangibles                               272000000.0            0.0   \n",
      "Purchase Of Intangibles                         -1500000000.0    -10000000.0   \n",
      "Net PPE Purchase And Sale                       -6514000000.0  -3232000000.0   \n",
      "Purchase Of PPE                                 -6514000000.0  -3232000000.0   \n",
      "Operating Cash Flow                             11497000000.0   5943000000.0   \n",
      "Cash Flow From Continuing Operating Activities  11497000000.0   5943000000.0   \n",
      "Change In Working Capital                         667000000.0    184000000.0   \n",
      "Change In Other Working Capital                   793000000.0    328000000.0   \n",
      "Change In Other Current Liabilities               476000000.0    495000000.0   \n",
      "Change In Other Current Assets                  -2114000000.0  -1416000000.0   \n",
      "Change In Payables And Accrued Expense           5367000000.0   2102000000.0   \n",
      "Change In Payable                                5367000000.0            NaN   \n",
      "Change In Account Payable                        5367000000.0            NaN   \n",
      "Change In Prepaid Assets                        -1540000000.0   -251000000.0   \n",
      "Change In Inventory                             -1709000000.0   -422000000.0   \n",
      "Change In Receivables                            -130000000.0   -652000000.0   \n",
      "Changes In Account Receivables                   -130000000.0   -652000000.0   \n",
      "Other Non Cash Items                              245000000.0    525000000.0   \n",
      "Stock Based Compensation                         2121000000.0   1734000000.0   \n",
      "Asset Impairment Charge                           140000000.0    202000000.0   \n",
      "Deferred Tax                                     -149000000.0            NaN   \n",
      "Deferred Income Tax                              -149000000.0            NaN   \n",
      "Depreciation Amortization Depletion              2911000000.0   2322000000.0   \n",
      "Depreciation And Amortization                    2911000000.0   2322000000.0   \n",
      "Depreciation                                     2911000000.0   2322000000.0   \n",
      "Operating Gains Losses                            -82000000.0    114000000.0   \n",
      "Net Foreign Currency Exchange Gain Loss           -55000000.0    114000000.0   \n",
      "Gain Loss On Sale Of PPE                          -27000000.0            0.0   \n",
      "Net Income From Continuing Operations            5644000000.0    862000000.0   \n",
      "\n",
      "                                                 2019-12-31  \n",
      "Free Cash Flow                                          NaN  \n",
      "Repayment Of Debt                                       NaN  \n",
      "Issuance Of Debt                                        NaN  \n",
      "Issuance Of Capital Stock                       848000000.0  \n",
      "Capital Expenditure                                     NaN  \n",
      "Interest Paid Supplemental Data                         NaN  \n",
      "Income Tax Paid Supplemental Data                       NaN  \n",
      "End Cash Position                                       NaN  \n",
      "Beginning Cash Position                                 NaN  \n",
      "Effect Of Exchange Rate Changes                         NaN  \n",
      "Changes In Cash                                         NaN  \n",
      "Financing Cash Flow                                     NaN  \n",
      "Cash Flow From Continuing Financing Activities          NaN  \n",
      "Net Other Financing Charges                             NaN  \n",
      "Proceeds From Stock Option Exercised                    NaN  \n",
      "Net Common Stock Issuance                       848000000.0  \n",
      "Common Stock Issuance                           848000000.0  \n",
      "Net Issuance Payments Of Debt                           NaN  \n",
      "Net Long Term Debt Issuance                             NaN  \n",
      "Long Term Debt Payments                                 NaN  \n",
      "Long Term Debt Issuance                                 NaN  \n",
      "Investing Cash Flow                                     NaN  \n",
      "Cash Flow From Continuing Investing Activities          NaN  \n",
      "Net Other Investing Changes                      46000000.0  \n",
      "Net Investment Purchase And Sale                        NaN  \n",
      "Sale Of Investment                                      NaN  \n",
      "Purchase Of Investment                                  NaN  \n",
      "Net Business Purchase And Sale                          NaN  \n",
      "Sale Of Business                                        NaN  \n",
      "Purchase Of Business                                    NaN  \n",
      "Net Intangibles Purchase And Sale                       NaN  \n",
      "Sale Of Intangibles                                     NaN  \n",
      "Purchase Of Intangibles                                 NaN  \n",
      "Net PPE Purchase And Sale                               NaN  \n",
      "Purchase Of PPE                                         NaN  \n",
      "Operating Cash Flow                                     NaN  \n",
      "Cash Flow From Continuing Operating Activities          NaN  \n",
      "Change In Working Capital                               NaN  \n",
      "Change In Other Working Capital                         NaN  \n",
      "Change In Other Current Liabilities              -5000000.0  \n",
      "Change In Other Current Assets                          NaN  \n",
      "Change In Payables And Accrued Expense                  NaN  \n",
      "Change In Payable                                       NaN  \n",
      "Change In Account Payable                               NaN  \n",
      "Change In Prepaid Assets                                NaN  \n",
      "Change In Inventory                                     NaN  \n",
      "Change In Receivables                                   NaN  \n",
      "Changes In Account Receivables                          NaN  \n",
      "Other Non Cash Items                                    NaN  \n",
      "Stock Based Compensation                                NaN  \n",
      "Asset Impairment Charge                                 NaN  \n",
      "Deferred Tax                                            NaN  \n",
      "Deferred Income Tax                                     NaN  \n",
      "Depreciation Amortization Depletion                     NaN  \n",
      "Depreciation And Amortization                           NaN  \n",
      "Depreciation                                            NaN  \n",
      "Operating Gains Losses                                  NaN  \n",
      "Net Foreign Currency Exchange Gain Loss                 NaN  \n",
      "Gain Loss On Sale Of PPE                                NaN  \n",
      "Net Income From Continuing Operations                   NaN  \n"
     ]
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "\n",
    "# Create a ticker object for Tesla\n",
    "tesla = yf.Ticker(\"TSLA\")\n",
    "\n",
    "# Display basic information about Tesla\n",
    "info = tesla.info\n",
    "print(\"Tesla Info:\")\n",
    "print(info)\n",
    "\n",
    "# Fetch historical market data\n",
    "history = tesla.history(period=\"1mo\")  # Last 1 month of data\n",
    "print(\"\\nTesla Historical Data:\")\n",
    "print(history)\n",
    "\n",
    "# Fetch financials\n",
    "financials = tesla.financials\n",
    "print(\"\\nTesla Financials:\")\n",
    "print(financials)\n",
    "\n",
    "# Fetch balance sheet\n",
    "balance_sheet = tesla.balance_sheet\n",
    "print(\"\\nTesla Balance Sheet:\")\n",
    "print(balance_sheet)\n",
    "\n",
    "# Fetch cashflow\n",
    "cashflow = tesla.cashflow\n",
    "print(\"\\nTesla Cash Flow:\")\n",
    "print(cashflow)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Using the ticker object and the function `history` extract stock information and save it in a dataframe named `tesla_data`. Set the `period` parameter to ` \"max\" ` so we get information for the maximum amount of time.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                               Open      High       Low     Close     Volume  \\\n",
      "Date                                                                           \n",
      "2010-06-29 00:00:00-04:00  1.266667  1.666667  1.169333  1.592667  281494500   \n",
      "2010-06-30 00:00:00-04:00  1.719333  2.028000  1.553333  1.588667  257806500   \n",
      "2010-07-01 00:00:00-04:00  1.666667  1.728000  1.351333  1.464000  123282000   \n",
      "2010-07-02 00:00:00-04:00  1.533333  1.540000  1.247333  1.280000   77097000   \n",
      "2010-07-06 00:00:00-04:00  1.333333  1.333333  1.055333  1.074000  103003500   \n",
      "\n",
      "                           Dividends  Stock Splits  \n",
      "Date                                                \n",
      "2010-06-29 00:00:00-04:00        0.0           0.0  \n",
      "2010-06-30 00:00:00-04:00        0.0           0.0  \n",
      "2010-07-01 00:00:00-04:00        0.0           0.0  \n",
      "2010-07-02 00:00:00-04:00        0.0           0.0  \n",
      "2010-07-06 00:00:00-04:00        0.0           0.0  \n",
      "DataFrame shape: (3553, 7)\n"
     ]
    }
   ],
   "source": [
    "# Fetch historical market data for the maximum period\n",
    "tesla_data = tesla.history(period=\"max\")\n",
    "\n",
    "# Display the first few rows of the DataFrame to verify\n",
    "print(tesla_data.head())\n",
    "\n",
    "# Save the data to a CSV file (optional)\n",
    "tesla_data.to_csv(\"tesla_data.csv\")\n",
    "\n",
    "# If you want to see the shape of the DataFrame\n",
    "print(f\"DataFrame shape: {tesla_data.shape}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Reset the index** using the `reset_index(inplace=True)` function on the tesla_data DataFrame and display the first five rows of the `tesla_data` dataframe using the `head` function. Take a screenshot of the results and code from the beginning of Question 1 to the results below.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Close</th>\n",
       "      <th>Volume</th>\n",
       "      <th>Dividends</th>\n",
       "      <th>Stock Splits</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2010-06-29 00:00:00-04:00</td>\n",
       "      <td>1.266667</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>1.169333</td>\n",
       "      <td>1.592667</td>\n",
       "      <td>281494500</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2010-06-30 00:00:00-04:00</td>\n",
       "      <td>1.719333</td>\n",
       "      <td>2.028000</td>\n",
       "      <td>1.553333</td>\n",
       "      <td>1.588667</td>\n",
       "      <td>257806500</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2010-07-01 00:00:00-04:00</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>1.728000</td>\n",
       "      <td>1.351333</td>\n",
       "      <td>1.464000</td>\n",
       "      <td>123282000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2010-07-02 00:00:00-04:00</td>\n",
       "      <td>1.533333</td>\n",
       "      <td>1.540000</td>\n",
       "      <td>1.247333</td>\n",
       "      <td>1.280000</td>\n",
       "      <td>77097000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2010-07-06 00:00:00-04:00</td>\n",
       "      <td>1.333333</td>\n",
       "      <td>1.333333</td>\n",
       "      <td>1.055333</td>\n",
       "      <td>1.074000</td>\n",
       "      <td>103003500</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       Date      Open      High       Low     Close  \\\n",
       "0 2010-06-29 00:00:00-04:00  1.266667  1.666667  1.169333  1.592667   \n",
       "1 2010-06-30 00:00:00-04:00  1.719333  2.028000  1.553333  1.588667   \n",
       "2 2010-07-01 00:00:00-04:00  1.666667  1.728000  1.351333  1.464000   \n",
       "3 2010-07-02 00:00:00-04:00  1.533333  1.540000  1.247333  1.280000   \n",
       "4 2010-07-06 00:00:00-04:00  1.333333  1.333333  1.055333  1.074000   \n",
       "\n",
       "      Volume  Dividends  Stock Splits  \n",
       "0  281494500        0.0           0.0  \n",
       "1  257806500        0.0           0.0  \n",
       "2  123282000        0.0           0.0  \n",
       "3   77097000        0.0           0.0  \n",
       "4  103003500        0.0           0.0  "
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Fetch historical market data for the maximum period\n",
    "tesla_data = tesla.history(period=\"max\")\n",
    "\n",
    "# Reset the index\n",
    "tesla_data.reset_index(inplace=True)\n",
    "\n",
    "# Display the first five rows\n",
    "tesla_data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Question 2: Use Webscraping to Extract Tesla Revenue Data\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Use the `requests` library to download the webpage https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/revenue.htm Save the text of the response as a variable named `html_data`.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: requests in /opt/conda/lib/python3.11/site-packages (2.31.0)\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.11/site-packages (from requests) (3.3.2)\n",
      "Requirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.11/site-packages (from requests) (3.7)\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.11/site-packages (from requests) (2.2.1)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.11/site-packages (from requests) (2024.6.2)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install requests\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Revenue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2021</td>\n",
       "      <td>$53,823</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2020</td>\n",
       "      <td>$31,536</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2019</td>\n",
       "      <td>$24,578</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2018</td>\n",
       "      <td>$21,461</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2017</td>\n",
       "      <td>$11,759</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Date  Revenue\n",
       "0  2021  $53,823\n",
       "1  2020  $31,536\n",
       "2  2019  $24,578\n",
       "3  2018  $21,461\n",
       "4  2017  $11,759"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import requests\n",
    "\n",
    "# URL of the webpage to download\n",
    "url = \"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/revenue.htm\"\n",
    "\n",
    "# Fetch the webpage content\n",
    "response = requests.get(url)\n",
    "\n",
    "# Save the text of the response to a variable\n",
    "html_data = response.text\n",
    "\n",
    "tesla_revenue.head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Parse the html data using `beautiful_soup` using parser i.e `html5lib` or `html.parser`. Make sure to use the `html_data` with the content parameter as follow `html_data.content` .\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (3253674121.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  Cell \u001b[0;32mIn[91], line 1\u001b[0;36m\u001b[0m\n\u001b[0;31m    pip install beautifulsoup\u001b[0m\n\u001b[0m        ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "pip install beautifulsoup\n",
    "pip install html5lib\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Using `BeautifulSoup` or the `read_html` function extract the table with `Tesla Revenue` and store it into a dataframe named `tesla_revenue`. The dataframe should have columns `Date` and `Revenue`.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Revenue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2022-09-30</td>\n",
       "      <td>21454.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2022-06-30</td>\n",
       "      <td>16934.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2022-03-31</td>\n",
       "      <td>18756.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2021-12-31</td>\n",
       "      <td>17719.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2021-09-30</td>\n",
       "      <td>13757.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Date  Revenue\n",
       "0  2022-09-30  21454.0\n",
       "1  2022-06-30  16934.0\n",
       "2  2022-03-31  18756.0\n",
       "3  2021-12-31  17719.0\n",
       "4  2021-09-30  13757.0"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from bs4 import BeautifulSoup\n",
    "import pandas as pd\n",
    "\n",
    "# Assuming html_data contains the HTML content of the page\n",
    "soup = BeautifulSoup(html_data, 'html.parser')\n",
    "\n",
    "# Find all tables on the webpage\n",
    "tables = soup.find_all('table')\n",
    "\n",
    "# Initialize an empty DataFrame\n",
    "tesla_revenue = pd.DataFrame(columns=[\"Date\", \"Revenue\"])\n",
    "\n",
    "# Loop through each table to find the relevant one\n",
    "for table in tables:\n",
    "    # Check if the table contains the desired text\n",
    "    if \"Tesla Quarterly Revenue\" in table.get_text():\n",
    "        # Find all rows in the table\n",
    "        rows = table.find_all('tr')\n",
    "        \n",
    "        # Loop through each row (skipping the header row if necessary)\n",
    "        for row in rows[1:]:  # Skipping the header row\n",
    "            cols = row.find_all('td')\n",
    "            if len(cols) >= 2:\n",
    "                date = cols[0].get_text(strip=True)\n",
    "                revenue = cols[1].get_text(strip=True)\n",
    "                \n",
    "                # Clean the revenue data\n",
    "                revenue = revenue.replace('$', '').replace(',', '')\n",
    "                \n",
    "                # Create a new DataFrame for the row\n",
    "                row_df = pd.DataFrame({\"Date\": [date], \"Revenue\": [revenue]})\n",
    "                \n",
    "                # Append the new DataFrame to the main DataFrame using pd.concat\n",
    "                tesla_revenue = pd.concat([tesla_revenue, row_df], ignore_index=True)\n",
    "\n",
    "# Convert the Revenue column to numeric\n",
    "tesla_revenue['Revenue'] = pd.to_numeric(tesla_revenue['Revenue'], errors='coerce')\n",
    "\n",
    "# Display the DataFrame\n",
    "tesla_revenue.head()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Revenue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>2010-06-30</td>\n",
       "      <td>28.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>2010-03-31</td>\n",
       "      <td>21.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51</th>\n",
       "      <td>2009-12-31</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>52</th>\n",
       "      <td>2009-09-30</td>\n",
       "      <td>46.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53</th>\n",
       "      <td>2009-06-30</td>\n",
       "      <td>27.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Date  Revenue\n",
       "49  2010-06-30     28.0\n",
       "50  2010-03-31     21.0\n",
       "51  2009-12-31      NaN\n",
       "52  2009-09-30     46.0\n",
       "53  2009-06-30     27.0"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Display the DataFrame\n",
    "tesla_revenue.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<details><summary>Step-by-step instructions</summary>\n",
    "\n",
    "```\n",
    "\n",
    "Here are the step-by-step instructions:\n",
    "\n",
    "1. Find All Tables: Start by searching for all HTML tables on a webpage using `soup.find_all('table')`.\n",
    "2. Identify the Relevant Table: then loops through each table. If a table contains the text “Tesla Quarterly Revenue,”, select that table.\n",
    "3. Initialize a DataFrame: Create an empty Pandas DataFrame called `tesla_revenue` with columns “Date” and “Revenue.”\n",
    "4. Loop Through Rows: For each row in the relevant table, extract the data from the first and second columns (date and revenue).\n",
    "5. Clean Revenue Data: Remove dollar signs and commas from the revenue value.\n",
    "6. Add Rows to DataFrame: Create a new row in the DataFrame with the extracted date and cleaned revenue values.\n",
    "7. Repeat for All Rows: Continue this process for all rows in the table.\n",
    "\n",
    "```\n",
    "</details>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<details><summary>Click here if you need help locating the table</summary>\n",
    "\n",
    "```\n",
    "    \n",
    "Below is the code to isolate the table, you will now need to loop through the rows and columns like in the previous lab\n",
    "    \n",
    "soup.find_all(\"tbody\")[1]\n",
    "    \n",
    "If you want to use the read_html function the table is located at index 1\n",
    "\n",
    "We are focusing on quarterly revenue in the lab.\n",
    "> Note: Instead of using the deprecated pd.append() method, consider using pd.concat([df, pd.DataFrame], ignore_index=True).\n",
    "```\n",
    "\n",
    "</details>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests\n",
    "from bs4 import BeautifulSoup\n",
    "import pandas as pd\n",
    "\n",
    "# URL of the webpage\n",
    "url = \"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/revenue.htm\"\n",
    "\n",
    "# Send a GET request to the URL\n",
    "response = requests.get(url)\n",
    "\n",
    "# Check if the request was successful\n",
    "if response.status_code == 200:\n",
    "    # Save the text of the response to the variable 'html_data'\n",
    "    html_data = response.text\n",
    "\n",
    "    # Parse the HTML data using BeautifulSoup with 'html.parser'\n",
    "    soup = BeautifulSoup(html_data, 'html.parser')\n",
    "\n",
    "    # Find the table with the Tesla Revenue (assuming it's the first table in the HTML)\n",
    "    table = soup.find_all(\"tbody\")\n",
    "\n",
    "    # Extract the table\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Execute the following line to remove the comma and dollar sign from the `Revenue` column. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "tesla_revenue[\"Revenue\"] = tesla_revenue['Revenue'].str.replace(',|\\$',\"\", regex=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: pandas in /opt/conda/lib/python3.11/site-packages (2.2.2)\n",
      "Requirement already satisfied: lxml in /opt/conda/lib/python3.11/site-packages (5.3.0)\n",
      "Requirement already satisfied: numpy>=1.23.2 in /opt/conda/lib/python3.11/site-packages (from pandas) (2.0.1)\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in /opt/conda/lib/python3.11/site-packages (from pandas) (2.9.0)\n",
      "Requirement already satisfied: pytz>=2020.1 in /opt/conda/lib/python3.11/site-packages (from pandas) (2024.1)\n",
      "Requirement already satisfied: tzdata>=2022.7 in /opt/conda/lib/python3.11/site-packages (from pandas) (2024.1)\n",
      "Requirement already satisfied: six>=1.5 in /opt/conda/lib/python3.11/site-packages (from python-dateutil>=2.8.2->pandas) (1.16.0)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install pandas lxml\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "tesla_revenue[\"Revenue\"] = tesla_revenue['Revenue'].str.replace(',|\\$',\"\", regex=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Execute the following lines to remove an null or empty strings in the Revenue column.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [],
   "source": [
    "tesla_revenue.dropna(inplace=True)\n",
    "\n",
    "tesla_revenue = tesla_revenue[tesla_revenue['Revenue'] != \"\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Display the last 5 row of the `tesla_revenue` dataframe using the `tail` function. Take a screenshot of the results.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Question 3: Use yfinance to Extract Stock Data\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Using the `Ticker` function enter the ticker symbol of the stock we want to extract data on to create a ticker object. The stock is GameStop and its ticker symbol is `GME`.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                               Open      High       Low     Close    Volume  \\\n",
      "Date                                                                          \n",
      "2002-02-13 00:00:00-05:00  1.620129  1.693350  1.603296  1.691667  76216000   \n",
      "2002-02-14 00:00:00-05:00  1.712707  1.716074  1.670626  1.683251  11021600   \n",
      "2002-02-15 00:00:00-05:00  1.683250  1.687458  1.658001  1.674834   8389600   \n",
      "2002-02-19 00:00:00-05:00  1.666418  1.666418  1.578047  1.607504   7410400   \n",
      "2002-02-20 00:00:00-05:00  1.615920  1.662210  1.603296  1.662210   6892800   \n",
      "\n",
      "                           Dividends  Stock Splits  \n",
      "Date                                                \n",
      "2002-02-13 00:00:00-05:00        0.0           0.0  \n",
      "2002-02-14 00:00:00-05:00        0.0           0.0  \n",
      "2002-02-15 00:00:00-05:00        0.0           0.0  \n",
      "2002-02-19 00:00:00-05:00        0.0           0.0  \n",
      "2002-02-20 00:00:00-05:00        0.0           0.0  \n"
     ]
    }
   ],
   "source": [
    "# Create a Ticker object for GameStop\n",
    "ticker = yf.Ticker(\"GME\")\n",
    "\n",
    "# Get historical market data\n",
    "game_stop_data = ticker.history(period=\"max\")\n",
    "\n",
    "# Display the first few rows of the data\n",
    "print(game_stop_data.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Using the ticker object and the function `history` extract stock information and save it in a dataframe named `gme_data`. Set the `period` parameter to ` \"max\" ` so we get information for the maximum amount of time.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Close</th>\n",
       "      <th>Volume</th>\n",
       "      <th>Dividends</th>\n",
       "      <th>Stock Splits</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2002-02-13 00:00:00-05:00</th>\n",
       "      <td>1.620129</td>\n",
       "      <td>1.693350</td>\n",
       "      <td>1.603296</td>\n",
       "      <td>1.691667</td>\n",
       "      <td>76216000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2002-02-14 00:00:00-05:00</th>\n",
       "      <td>1.712708</td>\n",
       "      <td>1.716074</td>\n",
       "      <td>1.670626</td>\n",
       "      <td>1.683251</td>\n",
       "      <td>11021600</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2002-02-15 00:00:00-05:00</th>\n",
       "      <td>1.683250</td>\n",
       "      <td>1.687458</td>\n",
       "      <td>1.658002</td>\n",
       "      <td>1.674834</td>\n",
       "      <td>8389600</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2002-02-19 00:00:00-05:00</th>\n",
       "      <td>1.666418</td>\n",
       "      <td>1.666418</td>\n",
       "      <td>1.578047</td>\n",
       "      <td>1.607504</td>\n",
       "      <td>7410400</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2002-02-20 00:00:00-05:00</th>\n",
       "      <td>1.615921</td>\n",
       "      <td>1.662210</td>\n",
       "      <td>1.603296</td>\n",
       "      <td>1.662210</td>\n",
       "      <td>6892800</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                               Open      High       Low     Close    Volume  \\\n",
       "Date                                                                          \n",
       "2002-02-13 00:00:00-05:00  1.620129  1.693350  1.603296  1.691667  76216000   \n",
       "2002-02-14 00:00:00-05:00  1.712708  1.716074  1.670626  1.683251  11021600   \n",
       "2002-02-15 00:00:00-05:00  1.683250  1.687458  1.658002  1.674834   8389600   \n",
       "2002-02-19 00:00:00-05:00  1.666418  1.666418  1.578047  1.607504   7410400   \n",
       "2002-02-20 00:00:00-05:00  1.615921  1.662210  1.603296  1.662210   6892800   \n",
       "\n",
       "                           Dividends  Stock Splits  \n",
       "Date                                                \n",
       "2002-02-13 00:00:00-05:00        0.0           0.0  \n",
       "2002-02-14 00:00:00-05:00        0.0           0.0  \n",
       "2002-02-15 00:00:00-05:00        0.0           0.0  \n",
       "2002-02-19 00:00:00-05:00        0.0           0.0  \n",
       "2002-02-20 00:00:00-05:00        0.0           0.0  "
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create a Ticker object for GameStop\n",
    "ticker = yf.Ticker(\"GME\")\n",
    "\n",
    "# Extract historical market data with the maximum period\n",
    "gme_data = ticker.history(period=\"max\")\n",
    "\n",
    "# Display the first few rows of the DataFrame\n",
    "gme_data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Reset the index** using the `reset_index(inplace=True)` function on the gme_data DataFrame and display the first five rows of the `gme_data` dataframe using the `head` function. Take a screenshot of the results and code from the beginning of Question 3 to the results below.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                       Date      Open      High       Low     Close    Volume  \\\n",
      "0 2002-02-13 00:00:00-05:00  1.620128  1.693350  1.603296  1.691666  76216000   \n",
      "1 2002-02-14 00:00:00-05:00  1.712708  1.716074  1.670626  1.683251  11021600   \n",
      "2 2002-02-15 00:00:00-05:00  1.683250  1.687458  1.658002  1.674834   8389600   \n",
      "3 2002-02-19 00:00:00-05:00  1.666418  1.666418  1.578047  1.607504   7410400   \n",
      "4 2002-02-20 00:00:00-05:00  1.615920  1.662210  1.603296  1.662210   6892800   \n",
      "\n",
      "   Dividends  Stock Splits  \n",
      "0        0.0           0.0  \n",
      "1        0.0           0.0  \n",
      "2        0.0           0.0  \n",
      "3        0.0           0.0  \n",
      "4        0.0           0.0  \n"
     ]
    }
   ],
   "source": [
    "# Extract historical market data with the maximum period\n",
    "gme_data = ticker.history(period=\"max\")\n",
    "\n",
    "# Reset the index of the DataFrame\n",
    "gme_data.reset_index(inplace=True)\n",
    "\n",
    "# Display the first five rows of the DataFrame\n",
    "print(gme_data.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Question 4: Use Webscraping to Extract GME Revenue Data\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Use the `requests` library to download the webpage https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/stock.html. Save the text of the response as a variable named `html_data_2`.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Webpage downloaded successfully.\n"
     ]
    }
   ],
   "source": [
    "import requests\n",
    "\n",
    "# URL of the webpage to download\n",
    "url = \"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/stock.html\"\n",
    "\n",
    "# Fetch data from the URL\n",
    "response = requests.get(url)\n",
    "\n",
    "# Check if the request was successful\n",
    "if response.status_code == 200:\n",
    "    # Save the text of the response\n",
    "    html_data_2 = response.text\n",
    "    print(\"Webpage downloaded successfully.\")\n",
    "else:\n",
    "    print(\"Failed to retrieve the webpage. Status code:\", response.status_code)\n",
    "\n",
    "#print(html_data_2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Parse the html data using `beautiful_soup` using parser i.e `html5lib` or `html.parser`.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {},
   "outputs": [],
   "source": [
    "from bs4 import BeautifulSoup\n",
    "\n",
    "# Assuming html_data_2 contains the HTML content as a string\n",
    "soup = BeautifulSoup(html_data_2, 'html.parser')\n",
    "\n",
    "# Print the parsed HTML (for verification)\n",
    "#print(soup.prettify())\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Using `BeautifulSoup` or the `read_html` function extract the table with `GameStop Revenue` and store it into a dataframe named `gme_revenue`. The dataframe should have columns `Date` and `Revenue`. Make sure the comma and dollar sign is removed from the `Revenue` column.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Revenue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>GameStop Revenue 2006-2020 | GME</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Macrotrends</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Source</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>GameStop Revenue 2006-2020 | GME</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Macrotrends</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                               Date  Revenue\n",
       "0  GameStop Revenue 2006-2020 | GME      NaN\n",
       "1                       Macrotrends      NaN\n",
       "2                            Source      NaN\n",
       "3  GameStop Revenue 2006-2020 | GME      NaN\n",
       "4                       Macrotrends      NaN"
      ]
     },
     "execution_count": 152,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#from bs4 import BeautifulSoup\n",
    "import pandas as pd\n",
    "\n",
    "# Parse the HTML content\n",
    "soup = BeautifulSoup(html_data_2, 'html.parser')\n",
    "\n",
    "# Find all tables on the webpage\n",
    "tables = soup.find_all('table')\n",
    "\n",
    "# Initialize an empty DataFrame\n",
    "gme_revenue = pd.DataFrame(columns=[\"Date\", \"Revenue\"])\n",
    "\n",
    "# Loop through each table to find the relevant one\n",
    "for table in tables:\n",
    "    # Check if the table contains the desired text\n",
    "    if \"GameStop Revenue\" in table.get_text():\n",
    "        # Find all rows in the table\n",
    "        rows = table.find_all('tr')\n",
    "        \n",
    "        # Loop through each row (skipping the header row if necessary)\n",
    "        for row in rows[1:]:  # Skipping the header row\n",
    "            cols = row.find_all('td')\n",
    "            if len(cols) >= 2:\n",
    "                date = cols[0].get_text(strip=True)\n",
    "                revenue = cols[-1].get_text(strip=True)\n",
    "                \n",
    "                # Clean the revenue data\n",
    "                revenue = revenue.replace('$', '').replace(',', '')\n",
    "\n",
    "                # Create a new DataFrame for the row\n",
    "                row_df = pd.DataFrame({\"Date\": [date], \"Revenue\": [revenue]})\n",
    "\n",
    "                \n",
    "                # Append the new DataFrame to the main DataFrame using pd.concat\n",
    "                gme_revenue = pd.concat([gme_revenue, row_df], ignore_index=True)\n",
    "\n",
    "# Convert the Revenue column to numeric\n",
    "gme_revenue['Revenue'] = pd.to_numeric(gme_revenue['Revenue'], errors='coerce')\n",
    "\n",
    "# Display the DataFrame\n",
    "gme_revenue.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Revenue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Macrotrends</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Source</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>GameStop Revenue 2006-2020 | GME</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Macrotrends</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Source</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                               Date  Revenue\n",
       "1                       Macrotrends      NaN\n",
       "2                            Source      NaN\n",
       "3  GameStop Revenue 2006-2020 | GME      NaN\n",
       "4                       Macrotrends      NaN\n",
       "5                            Source      NaN"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gme_revenue.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Columns before renaming: Index(['GameStop Annual Revenue (Millions of US $)', 'GameStop Annual Revenue (Millions of US $).1'], dtype='object')\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Revenue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>2009</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>2008</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>2007</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>2006</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>2005</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Date  Revenue\n",
       "11  2009      NaN\n",
       "12  2008      NaN\n",
       "13  2007      NaN\n",
       "14  2006      NaN\n",
       "15  2005      NaN"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from bs4 import BeautifulSoup\n",
    "import requests\n",
    "\n",
    "# URL for the HTML page\n",
    "url = \"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/stock.html\"\n",
    "\n",
    "# Fetch the HTML data\n",
    "response = requests.get(url)\n",
    "html_data_2 = response.text\n",
    "\n",
    "# Parse the HTML data with BeautifulSoup\n",
    "soup = BeautifulSoup(html_data_2, 'html.parser')\n",
    "\n",
    "# Find all tables\n",
    "tables = soup.find_all('table')\n",
    "\n",
    "# Identify the relevant table for GameStop Revenue\n",
    "# Assuming the first table is the relevant one; adjust if necessary\n",
    "table = tables[0]  # Adjust the index as needed\n",
    "\n",
    "# Read the table into a DataFrame\n",
    "gme_revenue = pd.read_html(str(table))[0]\n",
    "\n",
    "# Display the column names to verify\n",
    "print(\"Columns before renaming:\", gme_revenue.columns)\n",
    "\n",
    "# Rename columns if necessary\n",
    "gme_revenue.columns = ['Date', 'Revenue']\n",
    "\n",
    "# Clean the Revenue column\n",
    "if 'Revenue' in gme_revenue.columns:\n",
    "    gme_revenue['Revenue'] = gme_revenue['Revenue'].str.replace(',', '', regex=True)\n",
    "    gme_revenue['Revenue'] = gme_revenue['Revenue'].str.replace('$', '', regex=True)\n",
    "    gme_revenue['Revenue'] = pd.to_numeric(gme_revenue['Revenue'], errors='coerce')\n",
    "\n",
    "# Display the cleaned DataFrame\n",
    "gme_revenue.tail()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> **Note: Use the method similar to what you did in question 2.**  \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<details><summary>Click here if you need help locating the table</summary>\n",
    "\n",
    "```\n",
    "    \n",
    "Below is the code to isolate the table, you will now need to loop through the rows and columns like in the previous lab\n",
    "    \n",
    "soup.find_all(\"tbody\")[1]\n",
    "    \n",
    "If you want to use the read_html function the table is located at index 1\n",
    "\n",
    "\n",
    "```\n",
    "\n",
    "</details>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DataFrames found: 6\n",
      "Columns in the first DataFrame: Index(['GameStop Annual Revenue (Millions of US $)', 'GameStop Annual Revenue (Millions of US $).1'], dtype='object')\n",
      "   GameStop Annual Revenue (Millions of US $)  \\\n",
      "0                                        2020   \n",
      "1                                        2019   \n",
      "2                                        2018   \n",
      "3                                        2017   \n",
      "4                                        2016   \n",
      "\n",
      "  GameStop Annual Revenue (Millions of US $).1  \n",
      "0                                       $6,466  \n",
      "1                                       $8,285  \n",
      "2                                       $8,547  \n",
      "3                                       $7,965  \n",
      "4                                       $9,364  \n",
      "    Date  Revenue\n",
      "11  2009      NaN\n",
      "12  2008      NaN\n",
      "13  2007      NaN\n",
      "14  2006      NaN\n",
      "15  2005      NaN\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Use pandas to read all tables from the HTML data\n",
    "dfs = pd.read_html(html_data_2)\n",
    "\n",
    "# Check the DataFrame's structure\n",
    "print(\"DataFrames found:\", len(dfs))\n",
    "\n",
    "# Check the column names of the first DataFrame\n",
    "print(\"Columns in the first DataFrame:\", dfs[0].columns)\n",
    "\n",
    "# Assuming the relevant table is the first one; adjust index based on the actual table\n",
    "gme_revenue = dfs[0]  # Adjust index based on which table contains the GameStop Revenue\n",
    "\n",
    "# Display the first few rows of the DataFrame to understand its structure\n",
    "print(gme_revenue.head())\n",
    "\n",
    "# Rename columns if necessary (replace 'Date' and 'Revenue' with actual column names if different)\n",
    "gme_revenue.columns = [\"Date\", \"Revenue\"]\n",
    "\n",
    "# Clean the Revenue column if it exists\n",
    "if 'Revenue' in gme_revenue.columns:\n",
    "    gme_revenue['Revenue'] = gme_revenue['Revenue'].str.replace(',', '', regex=True)\n",
    "    gme_revenue['Revenue'] = gme_revenue['Revenue'].str.replace('$', '', regex=True)\n",
    "    gme_revenue['Revenue'] = pd.to_numeric(gme_revenue['Revenue'], errors='coerce')\n",
    "\n",
    "# Display the cleaned DataFrame\n",
    "gme_revenue.tail()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Revenue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Macrotrends</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Source</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>GameStop Revenue 2006-2020 | GME</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Macrotrends</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Source</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                               Date  Revenue\n",
       "1                       Macrotrends      NaN\n",
       "2                            Source      NaN\n",
       "3  GameStop Revenue 2006-2020 | GME      NaN\n",
       "4                       Macrotrends      NaN\n",
       "5                            Source      NaN"
      ]
     },
     "execution_count": 130,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gme_revenue.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Display the last five rows of the `gme_revenue` dataframe using the `tail` function. Take a screenshot of the results.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Revenue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2013</td>\n",
       "      <td>$2,013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2012</td>\n",
       "      <td>$413</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>2011</td>\n",
       "      <td>$204</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>2010</td>\n",
       "      <td>$117</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>2009</td>\n",
       "      <td>$112</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Date Revenue\n",
       "8   2013  $2,013\n",
       "9   2012    $413\n",
       "10  2011    $204\n",
       "11  2010    $117\n",
       "12  2009    $112"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Display the last five rows of the DataFrame\n",
    "\n",
    "\n",
    "tesla_revenue.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Question 5: Plot Tesla Stock Graph\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Use the `make_graph` function to graph the Tesla Stock Data, also provide a title for the graph. Note the graph will only show data upto June 2021.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<details><summary>Hint</summary>\n",
    "\n",
    "```\n",
    "\n",
    "You just need to invoke the make_graph function with the required parameter to print the graphs.The structure to call the `make_graph` function is `make_graph(tesla_data, tesla_revenue, 'Tesla')`.\n",
    "\n",
    "```\n",
    "    \n",
    "</details>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1400x700 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import yfinance as yf\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Fetch Tesla stock data\n",
    "tesla = yf.Ticker(\"TSLA\")\n",
    "tesla_data = tesla.history(period=\"max\")\n",
    "\n",
    "# Filter the data to only include up to June 2021\n",
    "tesla_data = tesla_data[:'2021-06-30']\n",
    "\n",
    "# Define the make_graph function\n",
    "def make_graph(stock_data, revenue_data, title):\n",
    "    plt.figure(figsize=(14, 7))\n",
    "\n",
    "    # Plot stock data\n",
    "    plt.subplot(2, 1, 1)\n",
    "    plt.plot(stock_data.index, stock_data['Close'], label='Stock Price')\n",
    "    plt.title(f'{title} Stock Price')\n",
    "    plt.xlabel('Date')\n",
    "    plt.ylabel('Price')\n",
    "    plt.legend()\n",
    "    plt.grid(True)\n",
    "\n",
    "    # Plot revenue data\n",
    "    plt.subplot(2, 1, 2)\n",
    "    plt.bar(revenue_data['Date'], revenue_data['Revenue'], color='orange')\n",
    "    plt.title(f'{title} Revenue')\n",
    "    plt.xlabel('Date')\n",
    "    plt.ylabel('Revenue')\n",
    "    plt.xticks(rotation=90)\n",
    "    plt.grid(True)\n",
    "\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "# Example usage of make_graph function\n",
    "# Ensure tesla_revenue is also defined\n",
    "make_graph(tesla_data, tesla_revenue, 'Tesla')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Question 6: Plot GameStop Stock Graph\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Use the `make_graph` function to graph the GameStop Stock Data, also provide a title for the graph. The structure to call the `make_graph` function is `make_graph(gme_data, gme_revenue, 'GameStop')`. Note the graph will only show data upto June 2021.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1400x700 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "make_graph(gme_data, gme_revenue, 'GameStop')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<details><summary>Hint</summary>\n",
    "\n",
    "```\n",
    "\n",
    "You just need to invoke the make_graph function with the required parameter to print the graphs.The structure to call the `make_graph` function is `make_graph(gme_data, gme_revenue, 'GameStop')`\n",
    "\n",
    "```\n",
    "    \n",
    "</details>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2>About the Authors:</h2> \n",
    "\n",
    "<a href=\"https://www.linkedin.com/in/joseph-s-50398b136/\">Joseph Santarcangelo</a> has a PhD in Electrical Engineering, his research focused on using machine learning, signal processing, and computer vision to determine how videos impact human cognition. Joseph has been working for IBM since he completed his PhD.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## <h3 align=\"center\"> © IBM Corporation 2020. All rights reserved. <h3/>\n",
    "\n",
    "```toggle ## Change Log\n",
    "```\n",
    "```toggle | Date (YYYY-MM-DD) | Version | Changed By    | Change Description        |\n",
    "```\n",
    "```toggle | ----------------- | ------- | ------------- | ------------------------- |\n",
    "```\n",
    "```toggle | 2022-02-28        | 1.2     | Lakshmi Holla | Changed the URL of GameStop |\n",
    "```\n",
    "```toggle | 2020-11-10        | 1.1     | Malika Singla | Deleted the Optional part |\n",
    "```\n",
    "```toggle | 2020-08-27        | 1.0     | Malika Singla | Added lab to GitLab       |\n",
    "```\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  },
  "prev_pub_hash": "3eff379447b11bb93fcfe9128340484c280bbca92c51ece98405a1f05537425b"
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
